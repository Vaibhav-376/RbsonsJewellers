// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"

}



datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  name         String
  password     String
  is_admin     Boolean  @default(false)
  registeredAt DateTime @default(now())

  cartItems CartItem[]
  orders    Order[]
  addresses Address[]
  payments  Payment[]
}

model Product {
  id            Int           @id @default(autoincrement())
  name          String
  description   String
  price         Float
  stock         Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  category      Category?     @relation(fields: [categoryId], references: [id])
  categoryId    Int?

  subCategory   SubCategory?  @relation(fields: [subCategoryId], references: [id])
  subCategoryId Int?

  cartItems     CartItem[]
  orderItems    OrderItem[]

  images        ProductImage[]  
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}



model Category {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  subCategories SubCategory[]
  products     Product[]
}

model SubCategory {
  id         Int      @id @default(autoincrement())
  name       String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  products   Product[]

  @@unique([name, categoryId]) 
}



model CartItem {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  quantity  Int      @default(1)
  createdAt DateTime @default(now())

  @@unique([userId, productId]) 
}

model Order {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int

  address   Address? @relation(fields: [addressId], references: [id])
  addressId Int?

  payment   Payment? @relation(fields: [paymentId], references: [id])
  paymentId Int?

  total     Float
  status    String   @default("processing") 
  createdAt DateTime @default(now())

  orderItems OrderItem[]
}

model OrderItem {
  id      Int   @id @default(autoincrement())
  order   Order @relation(fields: [orderId], references: [id])
  orderId Int

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  quantity Int
  price    Float 
}

model Address {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int

  fullName    String
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  phoneNumber String

  orders Order[]
}

model Payment {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int

  method        String 
  status        String   @default("pending") 
  transactionId String?  @unique
  amount        Float
  createdAt     DateTime @default(now())

  orders Order[]
}
